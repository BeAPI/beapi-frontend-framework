/**
 * 1. Font and Wording
 * 2. Images
 * 3. Forms
 * 4. Miscellaneous
 */


/**
 * 1. Font and Wording
 */

// FontFace. GO to root/_fonts.scss to see it in action
@mixin declare-font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal){
	@font-face{
		font-family: '#{$font-family}';
		font-weight: $font-weight;
		font-style: $font-style;
		font-stretch: $font-stretch;
		font-display: swap;
		src: url(#{$font-filename}.woff2) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
			 url(#{$font-filename}.woff) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
	}
}

// Word wrap
@mixin word-wrap($wrap: break-word) {
	overflow-wrap: $wrap;
	word-wrap: $wrap;

	@if $wrap == break-word {
	  word-break: break-all;
	} @else {
	  word-break: $wrap;
	}
}

/**
 * 2. Images
 */

// Image responsive
@mixin img__responsive($max-width:100%) {
	display: block;
	max-width: $max-width;
	height: auto;
}

// Object Fit polyfill
@mixin object-fit($fit: cover, $position: null) {
	object-fit: $fit;
	@if $position {
		object-position: $position;
		font-family: 'object-fit: #{$fit}; object-position: #{$position}';
	} @else {
		font-family: 'object-fit: #{$fit}';
	}
}

/**
 * 3. Forms
 */

// Mixin for custom checkbox
@mixin checkbox--custom($color: $maincolor, $size: 20px, $border-width: 2px) {
	margin-bottom: 20px;
	input[type="checkbox"],
	input[type="radio"] {
		@extend .visuallyhidden;
		&+label {
			display: block;
			cursor: pointer;
			position: relative;
			padding-left: $size * 1.5;
			&:before {
				content: '';
				position: absolute;
				left: 0;
				top: 1px;
				background-color: transparent;
				width: $size;
				height: $size;
				margin: 0;
				border: $border-width solid $color;
				cursor: pointer;
				transition: background-color .25s ease;
			}
		}
		&:checked {
			&+label {
				&:before {
					background-color: $color;
				}
			}
		}
	}
}


// Custom radio
@mixin radio--custom() {
	input[type="radio"] {
		&+label {
			&:before {
				border-radius: 50%;
			}
		}
	}
}

// Appearence for form elements
@mixin appearance($value) {
	appearance: $value;
}

// Customize placeholder
@mixin placeholder {
	$placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
	@each $placeholder in $placeholders {
	  &:#{$placeholder}-placeholder {
		@content;
	  }
	}
}

/**
 * 4. Miscellaneous
 */

// Hover Active Focus pseudo selector mixin
@mixin hover {
	&:hover, &:active, &:focus {
		@content;
	}
}

// Insert content for extra style
@mixin pseudo__content {
	content: "";
	display: block;
	speak: none;
}

// Card base
@mixin card {
	padding: $base-spacing;
	box-shadow: 0 2px 4px rgba($darkcolor, .25);
}

// Float, left by default
@mixin align($direction:left) {
	float: $direction;
	@if ($direction == left) {
		margin-right: $base-spacing;
	} @else {
		margin-left: $base-spacing;
	}
}

//fullwidth row
@mixin row--fullwidth($position: relative) {
	z-index: $zindex;
	position: $position;
	width: 100vw;
	left: 50%;
	transform: translateX(-50%) translateY(0);
}

// Clearfix
@mixin clearfix {
	*zoom: 1;
	&:before, &:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Hardware acceleration
@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}