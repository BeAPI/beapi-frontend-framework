// Responsive breakpoints mixin

@mixin add_variables( $view: frontend ) {

    @if frontend == $view {
        :root {
            @content;
        }
    }

    @if editor == $view {
        :root,
        body {
            @content;
        }
    }
}

// Layout

@mixin container($maxWidth: $container-width, $padding: $gutters-width) {
    width: calc(100% - #{$padding * 2});
    max-width: $maxWidth;
    margin-right: auto;
    margin-left: auto;
}

// Images

@mixin img-responsive($max-width: 100%) {
    display: block;
    max-width: $max-width;
    height: auto;
}

@mixin object-fit($fit: cover, $position: null) {
    object-fit: $fit;

    @if $position {
        object-position: $position;
        font-family: "object-fit: #{$fit}; object-position: #{$position}";
    } @else {
        font-family: "object-fit: #{$fit}";
    }
}

// Form fields

@mixin appearance($value) {
    // Appearence for form elements
    appearance: $value;
}

@mixin checkbox--custom($color: var(--global--color-primary), $size: 1em, $border-width: 2px) {
    // Mixin for custom checkbox
    margin-bottom: 20px;

    input[type="checkbox"],
    input[type="radio"] {

        @extend .visuallyhidden;

        + label {
            position: relative;
            display: block;
            padding-left: $size * 1.5;
            cursor: pointer;

            &::before {
                position: absolute;
                top: 1px;
                left: 0;
                width: calc(#{$size} + #{$border-width});
                height: calc(#{$size} + #{$border-width});
                margin: 0;
                cursor: pointer;
                content: "";
                background-color: transparent;
                border: $border-width solid $color;
                transition: background-color .25s ease;
            }
        }

        &:checked {
            + label {
                &::before {
                    background-color: $color;
                }
            }
        }
    }
}

// Custom radio

@mixin radio--custom() {
    input[type="radio"] {
        + label {
            &::before {
                border-radius: 50%;
            }
        }
    }
}

//Custom select

@mixin select--custom {
    display: block;
    width: 100%;
    max-width: 100%; /* useful when width is set to anything other than 100% */
    padding: #{1.6 * $baseline-unit} #{4.8 * $baseline-unit} #{1.6 * $baseline-unit} #{1.6 * $baseline-unit};
    margin: 0;
    font-size: var(--global--font-size-sm);
    font-weight: var(--form--label-weight);
    line-height: var(--form--line-height);
    color: var(--form--color-text);
    background-color: var(--form--color-background);
    background-image:
        url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 11.2 6.7'%3E%3Cpath d='M0 .5C0 .4.1.2.2.1c.2-.2.5-.1.7.1l4.6 5.3.1.1s.1 0 .1-.1L10.3.1c.2-.1.5-.2.7 0 .2.2.2.5.1.7L6.5 6.2c-.2.3-.5.5-.9.5s-.7-.2-.9-.6L.1.8C0 .7 0 .6 0 .5z'/%3E%3C/svg%3E"),
        linear-gradient(to bottom, var(--form-color-background) 0%, var(--form-color-background) 100%);
    background-repeat: no-repeat, repeat;
    background-position: right 10px top 50%, 0 0;
    background-size: 10px auto, 100%;
    border: var(--form--border-width) solid var(--form--border-color);
    border-radius: var(--form--border-radius);

    @include appearance(none);

    // Set options to normal weight
    option {
        font-weight: 400;
    }

    // Hide arrow icon in IE browsers
    &::-ms-expand {
        display: none;
    }

    // Hover style
    &:hover {
        border-color: var(--global--color-gray-500);
    }

    // Focus style
    &:focus {
        color: var(--form--color-text);
        border-color: var(--global--color-gray-500);
        outline: none;
        box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);
        box-shadow: 0 0 0 3px -moz-mac-focusring;

        option {
            outline: none;
        }
    }

    // Support for rtl text, explicit support for Arabic and Hebrew
    *[dir="rtl"] &,
    :root:lang(ar) &,
    :root:lang(iw) & {
        background-position: left 10px top 50%, 0 0;
    }
}

// Customize placeholder

@mixin placeholder {
    $placeholders: ":placeholder", ":-webkit-input-placeholder" ":-moz-placeholder" "-moz-placeholder" "-ms-input-placeholder";

    @each $placeholder in $placeholders {
        &:#{$placeholder} {
            @content;
        }
    }
}

// Webkit autofill

@mixin autofill {
    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus {
        @content;
    }
}

// Button style

@mixin button {
    display: inline-block;
    padding: var(--button--padding-horizontal) var(--button--padding-vertical);
    font-family: var(--button--font-family);
    font-size: var(--global--font-size-base);
    font-weight: var(--button--font-weight);
    line-height: var(--button--line-height);
    color: var(--button--color-text);
    vertical-align: middle;
    background-color: var(--button--color-background);
    border: 1px solid transparent;
    border-radius: var(--button--border-radius);
    transition: background-color .3s ease;

    &:hover {
        color: var(--button--color-text-hover);
    }

    &:focus,
    &:active {
        color: var(--button--color-text-active);
        background-color: var(--button--color-background-active);
    }
}

@mixin button--disabled($backgroundColor: $gray-color-500) {
    // Disabled button style
    cursor: not-allowed;
    opacity: .3;

    @include hover {
        background-color: $backgroundColor;
    }
}

@mixin button--text {
    // Text style
    padding: 0;
    background-color: transparent;

    @include hover {
        background-color: transparent;
    }
}

// Miscellaneous

@mixin hover {
    &:hover,
    &:active,
    &:focus {
        @content;
    }
}

@mixin pseudo__content {
    // Insert content for extra style
    display: block;
    content: "";
    speak: none;
}

@mixin clearfix {
    &::before,
    &::after {
        display: table;
        content: "";
    }

    &::after {
        clear: both;
    }
}

// Hardware acceleration

@mixin hardware($backface: true, $perspective: 1000) {

    @if $backface {
        backface-visibility: hidden;
    }

    perspective: $perspective;
}

@mixin innerblock-margin-clear($container) {

    // Clear the top margin for the first-child.
    > #{$container} > *:first-child {
        margin-top: 0;
    }

    // Last child that is not the appender.
    > #{$container} > *:last-child:not(.block-list-appender) {
        margin-bottom: 0;
    }

    // When selected, the last item becomes the second last because of the appender.
    &.has-child-selected > #{$container} > *:nth-last-child(2),
    &.is-selected > #{$container} > *:nth-last-child(2) {
        margin-bottom: 0;
    }
}
